// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ConsoleConfigurationLibrary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using SpreadSheetLightTableSample.Models;

namespace SpreadSheetLightTableSample.Data;

public partial class Context : DbContext
{
    public Context() { }

    public Context(DbContextOptions<Context> options) : base(options) { }

    public virtual DbSet<ContactTypes> ContactTypes { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Gender> Genders { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        // adaptable for web Dependency injection
        if (!optionsBuilder.IsConfigured)
            optionsBuilder.UseSqlServer(GetMainConnectionString());
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ContactTypes>(entity =>
        {
            entity.HasKey(e => e.Identifier);

            entity.Property(e => e.ContactType)
                .HasMaxLength(50)
                .HasColumnName("ContactType");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.Identifier);

            entity.ToTable("Customer");

            entity.Property(e => e.CompanyName).HasMaxLength(255);
            entity.Property(e => e.ContactFirstName).HasMaxLength(255);
            entity.Property(e => e.ContactLastName).HasMaxLength(255);

            entity.HasOne(d => d.ContactTypeIdentifierNavigation).WithMany(p => p.Customers)
                .HasForeignKey(d => d.ContactTypeIdentifier)
                .HasConstraintName("FK_Customer_ContactTypes");

            entity.HasOne(d => d.GenderIdentifierNavigation).WithMany(p => p.Customers)
                .HasForeignKey(d => d.GenderIdentifier)
                .HasConstraintName("FK_Customer_Genders");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    /// <summary>
    /// Retrieves the main connection string from the application's configuration.
    /// </summary>
    /// <remarks>
    /// This method accesses the application's configuration settings to fetch the 
    /// connection string defined under the <c>ConnectionStrings</c> section.
    /// </remarks>
    /// <returns>
    /// A <see cref="string"/> representing the main connection string used to connect to the database.
    /// </returns>
    private static string GetMainConnectionString()
        => Config.Configuration.JsonRoot()
            .GetSection(nameof(ConnectionStrings))
            .Get<ConnectionStrings>()
            .MainConnection;
}